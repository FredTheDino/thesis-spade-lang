@misc{src:ClashExists, year = {2009}, author = {C. {Baaij}}, month = {December}, title = {C$\lambda$asH : from Haskell to hardware}, url = {http://essay.utwente.nl/59482/} }

@article{src:spadeSomething, title={Spade: An HDL inspired by modern software languages}, DOI={10.1109/fpl57034.2022.00075}, journal={2022 32nd International Conference on Field-Programmable Logic and Applications (FPL)}, author={Skarman, Frans and Gustafsson, Oscar}, year={2022} }

@article{src:spadeAnHDL, title={Spade: An HDL inspired by modern software languages}, DOI={10.1109/fpl57034.2022.00075}, journal={2022 32nd International Conference on Field-Programmable Logic and Applications (FPL)}, author={Skarman, Frans and Gustafsson, Oscar}, year={2022} } 

@inproceedings{src:CvsCppCodeQualty, author = {Bhattacharya, Pamela and Neamtiu, Iulian}, title = {Assessing Programming Language Impact on Development and Maintenance: A Study on c and C++}, year = {2011}, isbn = {9781450304450}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, url = {https://doi-org.e.bibl.liu.se/10.1145/1985793.1985817}, doi = {10.1145/1985793.1985817}, booktitle = {Proceedings of the 33rd International Conference on Software Engineering}, pages = {171–180}, numpages = {10}, keywords = {developer productivity, empirical studies, high-level languages, software evolution, software quality}, location = {Waikiki, Honolulu, HI, USA}, series = {ICSE '11} }
@article{src:codeQualityReproductions, author = {Berger, Emery D. and Hollenbeck, Celeste and Maj, Petr and Vitek, Olga and Vitek, Jan}, title = {On the Impact of Programming Languages on Code Quality: A Reproduction Study}, year = {2019}, issue_date = {December 2019}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, volume = {41}, number = {4}, issn = {0164-0925}, url = {https://doi.org/10.1145/3340571}, doi = {10.1145/3340571}, journal = {ACM Trans. Program. Lang. Syst.}, month = {oct}, articleno = {21}, numpages = {24}, keywords = {Programming Languages on Code Quality} }

@book{src:DragonBook, place={Reading, Mass}, title={Compilers principles, techniques and tools}, publisher={Addison-Wesley}, author={Aho, Alfred V. and Sethi, Ravi and Ullman, Jeffrey D.}, year={1985}}  

@misc{src:CraftingInterp, title={Crafting interpreters}, url={https://craftinginterpreters.com/}, journal={Crafting Interpreters}, author={About Robert Nystrom}}

@misc{src:KKLectures, title={TDDB44 lectures and slides}, url={https://www.ida.liu.se/~TDDB44/lectures/lectures.en.shtml}, journal={TDDB44 Lectures and Slides}, publisher={Linköping University}, year={2022}}

@article{src:DamasHindleyMilner, title={Principal type-schemes for functional programs}, DOI={10.1145/582153.582176}, journal={Proceedings of the 9th ACM SIGPLAN-SIGACT symposium on Principles of programming languages  - POPL '82}, author={Damas, Luis and Milner, Robin}, year={1982}}

@article{src:MinOfFrac, title={Minimization of fractional wordlength on fixed-point conversion for high-level synthesis}, DOI={10.1109/aspdac.2004.1337544}, journal={ASP-DAC 2004: Asia and South Pacific Design Automation Conference 2004 (IEEE Cat. No.04EX753)}, author={Doi, N. and Horiyama, T. and Nakanishi, M. and Kimura, S.}, year={2004}}

@phdthesis{src:HLSandOpt, TITLE = {{High-level synthesis and arithmetic optimizations}}, AUTHOR = {Uguen, Yohann}, URL = {https://hal.science/tel-02420901}, NUMBER = {2019LYSEI099}, SCHOOL = {{Universit{\'e} de Lyon}}, YEAR = {2019}, MONTH = {nov}, TYPE = {Theses}, PDF = {https://hal.science/tel-02420901v2/file/these.pdf} }

@book{src:TypeCheckersBook, place={Cambridge, MA}, title={Types and programming languages}, publisher={The MIT Press}, author={Pierce, Benjamin C.}, year={2002}} 

@inproceedings{src:affAri,
  title={Self-validated numerical methods and applications},
  author={Stol, Jorge and De Figueiredo, Luiz Henrique},
  booktitle={Monograph for 21st Brazilian Mathematics Colloquium, IMPA, Rio de Janeiro. Citeseer},
  volume={5},
  number={1},
  year={1997},
  organization={Citeseer}
}

@misc{src:pianoTuners, title={Fermi's piano tuner} , url={https://www.grc.nasa.gov/www/k-12/Numbers/Math/Mathematical_Thinking/fermis_piano_tuner.htm} , journal={NASA} , publisher={NASA}}

@misc{src:curryHowardIso, title={THE FORMULAE-AS-TYPES NOTION OF CONSTRUCTION}, url={https://www.cs.cmu.edu/~crary/819-f09/Howard80.pdf}, author={W. A. Howard and H. B. Curry}, year={1980}}

@misc{src:rustMono, title={Generic Data Types - The Rust Programming Language}, url={https://doc.rust-lang.org/book/ch10-01-syntax.html#performance-of-code-using-generics}, year = {2023}, month={jun}}

@article{src:MEgPC, title = {An adaptive multi-element generalized polynomial chaos method for stochastic differential equations}, journal = {Journal of Computational Physics}, volume = {209}, number = {2}, pages = {617-642}, year = {2005}, issn = {0021-9991}, doi = {https://doi.org/10.1016/j.jcp.2005.03.023}, url = {https://www.sciencedirect.com/science/article/pii/S0021999105001919}, author = {Xiaoliang Wan and George Em Karniadakis}, keywords = {Uncertainty, Polynomial chaos, Discontinuities}, abstract = {We formulate a Multi-Element generalized Polynomial Chaos (ME-gPC) method to deal with long-term integration and discontinuities in stochastic differential equations. We first present this method for Legendre-chaos corresponding to uniform random inputs, and subsequently we generalize it to other random inputs. The main idea of ME-gPC is to decompose the space of random inputs when the relative error in variance becomes greater than a threshold value. In each subdomain or random element, we then employ a generalized polynomial chaos expansion. We develop a criterion to perform such a decomposition adaptively, and demonstrate its effectiveness for ODEs, including the Kraichnanâ€“Orszag three-mode problem, as well as advectionâ€“diffusion problems. The new method is similar to spectral element method for deterministic problems but with hâ€“p discretization of the random space.} }

@article{src:FPGA, url = {http://dx.doi.org/10.1561/1000000005}, year = {2008}, volume = {2}, journal = {Foundations and TrendsÂ® in Electronic Design Automation}, title = {FPGA Architecture: Survey and Challenges}, doi = {10.1561/1000000005}, issn = {1551-3939}, number = {2}, pages = {135-253}, author = {Ian Kuon and Russell Tessier and Jonathan Rose} }

@misc{src:FPGAApplications, url={https://www.intel.com/content/www/us/en/government/products/programmable/applications.html}, year={2023}, month={jun}, title={FPGA for Military Applications - Intel® FPGA}}

@misc{src:Agile,
      title={Agile Software Development Methods: Review and Analysis}, 
      author={Pekka Abrahamsson and Outi Salo and Jussi Ronkainen and Juhani Warsta},
      year={2017},
      eprint={1709.08439},
      archivePrefix={arXiv},
      primaryClass={cs.SE}
}

@inproceedings{src:ConFPGA,
author = {Frigo, Jan and Gokhale, Maya and Lavenier, Dominique},
title = {Evaluation of the Streams-C C-to-FPGA Compiler: An Applications Perspective},
year = {2001},
isbn = {1581133413},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/360276.360326},
doi = {10.1145/360276.360326},
abstract = {The Streams-C compiler ([5]) synthesizes hardware circuits for reconfigurable FPGA-based computers from parallel C programs. The Streams-C language consists of a small number of libraries and intrinsic functions added to a synthesizable subset of C, and supports a communicating process programming model. The processes may be either software or hardware processes, and the compiler manages communication among the processes transparently to the programmer. For the hardware processes, the compiler generates Register-Transfer-Level (RTL) VHDL, targeting multiple FPGAs with dedicated memories. For the software processes, a multi-threaded software program is generated.The Streams-C language and compiler offer a very high level of expressivity for reconfigurable computing application development, particularly for stream-processing applications. We find this is reflected in productivity, for a factor of up to 10 times improvement in time to produce a program. However, use of the tool in the ``real world'' is predicated on performance: only if such a compiler can deliver performance comparable to hand-coded performance will it be used in practice.This paper presents an application study of the Streams-C compiler. Four applications have been written in Streams-C and compiled to the AMC Wildforce board containing Xilinx 4036's. Those same applications have been hand-coded in a combination of RTL and structural VHDL. We compare performance of the generated code with the hand-optimized code. Our study shows that the compiler-generated designs are 1.37--4 times the area and $1/2$--1 times the clock frequency of the hand designs. We find that the compiler, based on the SUIF infrastructure, can be greatly improved through various standard compiler optimizations that are not currently being exploited. Thus we are currently re-writing a public domain version of Streams-C to better optimize and target the Virtex chip.},
booktitle = {Proceedings of the 2001 ACM/SIGDA Ninth International Symposium on Field Programmable Gate Arrays},
pages = {134–140},
numpages = {7},
keywords = {configurable computing, silicon compiler, FPGA design tools, hardware-software co-design, high-level synthesis, FPGA},
location = {Monterey, California, USA},
series = {FPGA '01}
}
